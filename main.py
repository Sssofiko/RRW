import os
import numpy as np
import cv2
import matplotlib.pyplot as plt
from Embedding_extraction import embed_watermark, extract_watermark
from Constructing_robust_features import generate_random_bijection
from quality import mse, psnr, rmse, ssim, robustness
from Review_of_JPEG_compression import jpeg_compression_pipeline


def get_cell_size_input():
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–∑–º–µ—Ä —è—á–µ–π–∫–∏ (cell_height, cell_width) –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–æ–¥.
    """
    print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —è—á–µ–µ–∫: 16√ó8, 8√ó8, 8√ó4, 4√ó4, 4√ó2.")
    while True:
        try:
            cell_height, cell_width = map(int, input("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —è—á–µ–π–∫–∏ (cell_height cell_width): ").split())
            if (cell_height == 16 and cell_width == 8) or \
                    (cell_height == 8 and cell_width == 8) or \
                    (cell_height == 8 and cell_width == 4) or \
                    (cell_height == 4 and cell_width == 4) or \
                    (cell_height == 4 and cell_width == 2):
                return cell_height, cell_width
            else:
                print("\n‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä —è—á–µ–π–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        except ValueError:
            print("\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")


def get_watermark_path_and_check_size(cell_height, cell_width):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ —Ä–∞–∑–º–µ—Ä.
    –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è, —á—Ç–æ —Ä–∞–∑–º–µ—Ä –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω—É–∂–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–∏—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —è—á–µ–π–∫–∏.
    """
    # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —è—á–µ–µ–∫ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏—Ç –¶–í–ó:
    cell_to_bits = {
        (16, 8): 32,
        (8, 8): 64,
        (8, 4): 128,
        (4, 4): 256,
        (4, 2): 512
    }

    expected_bits = cell_to_bits.get((cell_height, cell_width))
    if not expected_bits:
        print(f"\n‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä —è—á–µ–π–∫–∏: {cell_height}x{cell_width}.")
        return None

    while True:
        watermark_path = input("\n–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞: ").strip()
        if os.path.isfile(watermark_path):
            watermark_img = cv2.imread(watermark_path, cv2.IMREAD_GRAYSCALE)
            if watermark_img is not None:
                height, width = watermark_img.shape
                watermark_bits = height * width
                print(f"\n–†–∞–∑–º–µ—Ä –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞: {height}x{width} –ø–∏–∫—Å–µ–ª–µ–π, —á—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç {watermark_bits} –±–∏—Ç.")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
                if watermark_bits == expected_bits:
                    return watermark_path, watermark_bits
                else:
                    print(
                        f"\n‚ùå –û—à–∏–±–∫–∞: –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å {expected_bits} –±–∏—Ç, –Ω–æ —É –≤–∞—Å {watermark_bits} –±–∏—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫.")
            else:
                print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        else:
            print("\n‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å.")


def get_selected_bands():
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª–æ—Å—ã –¥–ª—è DCT –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.
    –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ selected_bands, –≥–¥–µ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
    - —ç—Ç–æ 64 –º–∏–Ω—É—Å –Ω–æ–º–µ—Ä –ø–æ–ª–æ—Å—ã, –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    """
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª–æ—Å, –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            input_bands = list(map(int, input("\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 11 12 13): ").split()))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–æ–ª–æ—Å—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
            if all(1 <= band <= 64 for band in input_bands):
                # –î–ª—è –∫–∞–∂–¥–æ–π –≤–≤–µ–¥—ë–Ω–Ω–æ–π –ø–æ–ª–æ—Å—ã –≤—ã—á–∏—Å–ª—è–µ–º 64 - band
                selected_bands = [64 - band for band in input_bands]
                print(f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª–æ—Å—ã: {input_bands}")
                return selected_bands, input_bands
            else:
                print("\n‚ùå –û—à–∏–±–∫–∞: –≤—Å–µ –ø–æ–ª–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 64. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except ValueError:
            print("\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")


def get_key_input(cell_height, cell_width):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–ª—é—á (–ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫—É) –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.
    """
    total_elements = cell_height * cell_width

    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –∫–ª—é—á–∞:")
        print("1. –í–≤–µ—Å—Ç–∏ –∫–ª—é—á –≤—Ä—É—á–Ω—É—é.")
        print("2. –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª—é—á –∏–∑ —Ñ–∞–π–ª–∞.")
        print("3. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∫–ª—é—á.")

        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1/2/3): ").strip()

        if choice == "1":
            try:
                key = list(
                    map(int, input(f"–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫—É —á–∏—Å–µ–ª –æ—Ç 0 –¥–æ {total_elements - 1} —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: ").split()))
                if len(key) == total_elements and len(set(key)) == total_elements:
                    return np.array(key)
                else:
                    print(
                        f"\n‚ùå –û—à–∏–±–∫–∞: –∫–ª—é—á –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç 0 –¥–æ {total_elements - 1}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            except ValueError:
                print("\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        elif choice == "2":
            key_file = input("\n–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∫–ª—é—á–æ–º: ").strip()
            if os.path.isfile(key_file):
                with open(key_file, "r") as f:
                    try:
                        key = list(map(int, f.read().split()))
                        if len(key) == total_elements and len(set(key)) == total_elements:
                            return np.array(key)
                        else:
                            print("\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–Ω–∞—á–µ–Ω–∏—è.")
                    except ValueError:
                        print("\n‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞.")
            else:
                print("\n‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        elif choice == "3":
            key = generate_random_bijection(cell_height, cell_width)
            return key
        else:
            print("\n‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1, 2 –∏–ª–∏ 3.")


def embed_watermark_to_image():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞.
    """
    print("\n–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞.")

    # –®–∞–≥ 1: –í–≤–æ–¥ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    image_path = input("\n–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞: ").strip()

    # –®–∞–≥ 2: –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —è—á–µ–µ–∫
    cell_height, cell_width = get_cell_size_input()

    # –®–∞–≥ 3: –í–≤–æ–¥ –ø—É—Ç–∏ –∫ –≤–æ–¥—è–Ω–æ–º—É –∑–Ω–∞–∫—É –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
    watermark_path, watermark_size = get_watermark_path_and_check_size(cell_height, cell_width)

    # –®–∞–≥ 4: –í–≤–æ–¥ –ø–æ–ª–æ—Å
    selected_bands, input_bands = get_selected_bands()

    # –®–∞–≥ 5: –í–≤–æ–¥ –∫–ª—é—á–∞
    key = get_key_input(cell_height, cell_width)

    # –®–∞–≥ 6: –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
    watermarked_img, watermark_bits, T, cover_shape = embed_watermark(
        cover_path=image_path,
        watermark_path=watermark_path,
        block_size=8,
        selected_bands=selected_bands,
        input_bands=input_bands,
        cell_height=cell_height,
        cell_width=cell_width,
        key=key  # –ü–µ—Ä–µ–¥–∞—ë–º –∫–ª—é—á
    )
    # –®–∞–≥ 7: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    save_path = input(
        "\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –≤–æ–¥—è–Ω—ã–º –∑–Ω–∞–∫–æ–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'watermarked_image.jpg'): ").strip()

    # –ï—Å–ª–∏ –∏–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
    if not save_path:
        save_path = "watermarked_image"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .jpg –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    if not save_path.endswith(".jpg"):
        save_path += ".jpg"

    cv2.imwrite(save_path, watermarked_img)
    print(f"\n‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ –ø—É—Ç–∏ {save_path}")

    # –®–∞–≥ 8: –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—é—á–µ
    print(f"\nüîë –ë—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–ª—é—á: {key}")

    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞—Ç—å –∫–ª—é—á –≤ —Ñ–∞–π–ª
    save_key = input("\n–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª—é—á –≤ —Ñ–∞–π–ª 'key.txt'? (–î–∞/–ù–µ—Ç): ").strip().lower()
    if save_key == '–¥–∞':
        with open("key.txt", "w") as key_file:
            key_file.write(" ".join(map(str, key)))
        print("\n‚úÖ –ö–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ 'key.txt'.")
    else:
        print("\n–ö–ª—é—á –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")

    # –®–∞–≥ 9: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    compare_images = input(
        "\n–ñ–µ–ª–∞–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –≤–æ–¥—è–Ω—ã–º –∑–Ω–∞–∫–æ–º? (–î–∞/–ù–µ—Ç): ").strip().lower()

    if compare_images == '–¥–∞':
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        original_img = jpeg_compression_pipeline(image_path)
        # original_img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä—è–¥–æ–º
        plt.figure(figsize=(12, 6))

        # –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        plt.subplot(1, 2, 1)
        plt.imshow(original_img, cmap='gray')
        plt.title("–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        plt.axis('off')

        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤–æ–¥—è–Ω—ã–º –∑–Ω–∞–∫–æ–º
        plt.subplot(1, 2, 2)
        plt.imshow(watermarked_img, cmap='gray')
        plt.title("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤–æ–¥—è–Ω—ã–º –∑–Ω–∞–∫–æ–º")
        plt.axis('off')

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        plt.tight_layout()
        plt.show()


def get_key_input_for_extraction(cell_height, cell_width):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–ª—é—á (–ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫—É) –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.
    """
    total_elements = cell_height * cell_width

    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –∫–ª—é—á–∞:")
        print("1. –í–≤–µ—Å—Ç–∏ –∫–ª—é—á –≤—Ä—É—á–Ω—É—é.")
        print("2. –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª—é—á –∏–∑ —Ñ–∞–π–ª–∞.")

        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1/2): ").strip()

        if choice == "1":
            try:
                key = list(
                    map(int, input(f"–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫—É —á–∏—Å–µ–ª –æ—Ç 0 –¥–æ {total_elements - 1} —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: ").split()))
                if len(key) == total_elements and len(set(key)) == total_elements:
                    return np.array(key)
                else:
                    print(
                        f"\n‚ùå –û—à–∏–±–∫–∞: –∫–ª—é—á –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç 0 –¥–æ {total_elements - 1}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            except ValueError:
                print("\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        elif choice == "2":
            key_file = input("\n–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∫–ª—é—á–æ–º: ").strip()
            if os.path.isfile(key_file):
                with open(key_file, "r") as f:
                    try:
                        key = list(map(int, f.read().split()))
                        if len(key) == total_elements and len(set(key)) == total_elements:
                            return np.array(key)
                        else:
                            print("\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–Ω–∞—á–µ–Ω–∏—è.")
                    except ValueError:
                        print("\n‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞.")
            else:
                print("\n‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        else:
            print("\n‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1 –∏–ª–∏ 2.")


def extract_watermark_from_image():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞.
    """
    print("\n–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞.")

    # –®–∞–≥ 1: –í–≤–æ–¥ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    watermarked_image_path = input("\n–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —Å –≤–æ–¥—è–Ω—ã–º –∑–Ω–∞–∫–æ–º: ").strip()

    # –®–∞–≥ 2: –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —è—á–µ–µ–∫
    cell_height, cell_width = get_cell_size_input()

    # –®–∞–≥ 3: –í–≤–æ–¥ –ø–æ–ª–æ—Å
    selected_bands, _ = get_selected_bands()

    # –®–∞–≥ 4: –í–≤–æ–¥ –∫–ª—é—á–∞
    key = get_key_input_for_extraction(cell_height, cell_width)

    # –®–∞–≥ 5: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
    watermarked_img = cv2.imread(watermarked_image_path, cv2.IMREAD_GRAYSCALE)
    if watermarked_img is None:
        raise FileNotFoundError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª {watermarked_image_path}")

    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
    extracted_bits = extract_watermark(
        watermarked_img=watermarked_img,
        cover_shape=watermarked_img.shape,
        block_size=8,
        selected_bands=selected_bands,
        cell_height=cell_height,
        cell_width=cell_width,
        key=key
    )

    # –®–∞–≥ 6: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–≤–ª–µ—á—ë–Ω–Ω–æ–≥–æ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
    wm_height, wm_width = map(int, input("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É –∏ —à–∏—Ä–∏–Ω—É –∏–∑–≤–ª–µ–∫–∞–µ–º–æ–≥–æ –¶–í–ó (wm_height wm_width): ").split())

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–≤–ª–µ—á—ë–Ω–Ω–æ–≥–æ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
    extracted_watermark_img = (extracted_bits.reshape((wm_height, wm_width)) * 255).astype(np.uint8)

    save_path = input(
        "\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–≤–ª–µ—á—ë–Ω–Ω–æ–≥–æ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'extracted_watermark.jpg'): ").strip()

    # –ï—Å–ª–∏ –∏–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
    if not save_path:
        save_path = "extracted_watermark"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .jpg –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    if not save_path.endswith(".jpg"):
        save_path += ".jpg"

    cv2.imwrite(save_path, extracted_watermark_img)
    print(f"\n‚úÖ –¶–í–ó —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ –ø—É—Ç–∏ {save_path}")

    show_extracted = input("\n–ñ–µ–ª–∞–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫? (–î–∞/–ù–µ—Ç): ").strip().lower()

    if show_extracted == "–¥–∞":
        plt.imshow(extracted_watermark_img, cmap='gray')
        plt.title("–ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫")
        plt.axis('off')
        plt.show()


def evaluate_quality():
    """
    –û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è: —Ä–∞—Å—á–µ—Ç MSE, PSNR, RMSE, SSIM, BER –∏ NCC.
    """
    print("\n–û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞.")

    # –®–∞–≥ 1: –í–≤–æ–¥ –ø—É—Ç–∏ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    original_img_path = input("\n–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: ").strip()

    # –®–∞–≥ 2: –í–≤–æ–¥ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —Å –≤–æ–¥—è–Ω—ã–º –∑–Ω–∞–∫–æ–º
    watermarked_img_path = input("\n–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —Å –≤–æ–¥—è–Ω—ã–º –∑–Ω–∞–∫–æ–º: ").strip()

    # –®–∞–≥ 3: –í–≤–æ–¥ –ø—É—Ç–∏ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –≤–æ–¥—è–Ω–æ–º—É –∑–Ω–∞–∫—É
    original_watermark_path = input("\n–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –≤–æ–¥—è–Ω–æ–º—É –∑–Ω–∞–∫—É: ").strip()

    # –®–∞–≥ 4: –í–≤–æ–¥ –ø—É—Ç–∏ –∫ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–º—É –≤–æ–¥—è–Ω–æ–º—É –∑–Ω–∞–∫—É
    extracted_watermark_path = input("\n–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–º—É –≤–æ–¥—è–Ω–æ–º—É –∑–Ω–∞–∫—É: ").strip()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    # original_img = cv2.imread(original_img_path, cv2.IMREAD_GRAYSCALE)
    original_img = jpeg_compression_pipeline(original_img_path)
    watermarked_img = cv2.imread(watermarked_img_path, cv2.IMREAD_GRAYSCALE)
    original_watermark = cv2.imread(original_watermark_path, cv2.IMREAD_GRAYSCALE)
    extracted_watermark = cv2.imread(extracted_watermark_path, cv2.IMREAD_GRAYSCALE)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    if original_img is None:
        print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å.")
        return
    if watermarked_img is None:
        print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –≤–æ–¥—è–Ω—ã–º –∑–Ω–∞–∫–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å.")
        return
    if original_watermark is None:
        print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å.")
        return
    if extracted_watermark is None:
        print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å.")
        return

    # –®–∞–≥ 5: –†–∞—Å—á–µ—Ç –∫–∞—á–µ—Å—Ç–≤–∞
    # –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: MSE, PSNR, RMSE, SSIM
    print("\n–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:")

    mse_value = mse(original_img, watermarked_img)
    psnr_value = psnr(original_img, watermarked_img)
    rmse_value = rmse(original_img, watermarked_img)
    ssim_value = ssim(original_img, watermarked_img)

    print(f"MSE: {mse_value}")
    print(f"PSNR: {psnr_value}")
    print(f"RMSE: {rmse_value}")
    print(f"SSIM: {ssim_value}")

    # –î–ª—è –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤: BER –∏ NCC
    print("\n–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤:")

    ber_value, ncc_value = robustness(original_watermark, extracted_watermark)

    print(f"BER (–±–∏—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞): {ber_value}%")
    print(f"NCC (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫—Ä–æ—Å—Å-–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è): {ncc_value}")


def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–µ–π—Å—Ç–≤–∏—è (–≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ, –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–ª–∏ –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞).
    """
    print("\033[1;34mRobust reversible watermarking of JPEG images\033[0m")
    while True:
        print("\n=====================")
        print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞.")
        print("2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞.")
        print("3. –û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è.")
        print("4. –í—ã—Ö–æ–¥.")
        print("=====================")

        choice = input("–í–∞—à –≤—ã–±–æ—Ä (1/2/3/4): ").strip()

        if choice == "1":
            embed_watermark_to_image()
        elif choice == "2":
            extract_watermark_from_image()
        elif choice == "3":
            evaluate_quality()
        elif choice == "4":
            print("\n–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
            break
        else:
            print("\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1, 2, 3 –∏–ª–∏ 4.")


if __name__ == "__main__":
    main()
